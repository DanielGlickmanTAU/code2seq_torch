import sys
from main import main


# class MyTestCase(unittest.TestCase):
#     def test_something(self):
#         torch.set_num_threads(cfg.num_threads)
#         cfg.device = str(compute.get_device())
#         # os.chdir('..')
#         self._append_params()
#         args = parse_args()
#         # Load config file
#         set_cfg(cfg)  # add assertion here
#         load_cfg(cfg, args)
#         cfg.run_id = 0
#         for key, value in args.__dict__.items():
#             # this handle nested props like optim.base_lr
#             keys = key.split('.')
#             cfg_dict = cfg
#             for k in keys[:-1]:
#                 cfg_dict = cfg_dict[k]
#             cfg_dict[key] = value
#
#         train_flow(cfg)
#
#     def _append_params(self):
#         sys.argv.append('--cfg')
#         sys.argv.append('tests/configs/graph/color-histogram.yaml')
#         sys.argv.append('--max_examples')
#         sys.argv.append('100')
#         sys.argv.append('--num_rows')
#         sys.argv.append('10')
#         sys.argv.append('--words_per_row')
#         sys.argv.append('10')
#         sys.argv.append('--atom_set')
#         sys.argv.append('8')
#         sys.argv.append('--num_unique_atoms')
#         sys.argv.append('1')
#         sys.argv.append('--num_unique_colors')
#         sys.argv.append('20')
#         sys.argv.append('--row_color_mode')
#         sys.argv.append('histogram')
#         sys.argv.append('nagasaki.steps')
#         sys.argv.append('"[1, 2, 3, 4, 5,6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"')
#         sys.argv.append('gt.layer_type')
#         sys.argv.append('CustomGatedGCN+Nagasaki')
#         sys.argv.append('gt.layers')
#         sys.argv.append('3')
#         sys.argv.append('gt.n_heads')
#         sys.argv.append('2')
#         sys.argv.append('gt.n_layers_gnn_only')
#         sys.argv.append('1')
#         sys.argv.append('posenc_LapPE.enable')
#         sys.argv.append('False')
#         sys.argv.append('posenc_LapPE.layers')
#         sys.argv.append('0')
#         sys.argv.append('dataset.node_encoder_name')
#         sys.argv.append('TypeDictNode+RWSE')
#         sys.argv.append('posenc_SignNet.enable')
#         sys.argv.append('False')
#         sys.argv.append('posenc_SignNet.post_layers')
#         sys.argv.append('2')
#         sys.argv.append('posenc_RWSE.enable')
#         sys.argv.append('True')
#         sys.argv.append('posenc_RWSE.kernel.times_func')
#         sys.argv.append('"range(1, 21)"')
#         sys.argv.append('posenc_RWSE.model')
#         sys.argv.append('Linear')
#         sys.argv.append('posenc_RWSE.dim_pe')
#         sys.argv.append('24')
#         sys.argv.append('posenc_RWSE.raw_norm_type')
#         sys.argv.append('BatchNorm')
#         sys.argv.append('optim.base_lr')
#         sys.argv.append('0.0004')
#         sys.argv.append('dataset.only_color')
#         sys.argv.append('False')
#         sys.argv.append('gt.dim_hidden')
#         sys.argv.append('32')
#         sys.argv.append('gnn.dim_inner')
#         sys.argv.append('32')
#         sys.argv.append('optim.early_stop_patience')
#         sys.argv.append('10')
#         sys.argv.append('nagasaki.edge_model_type')
#         sys.argv.append('bn-mlp')
#         sys.argv.append('nagasaki.edge_reduction')
#         sys.argv.append('linear')
#         sys.argv.append('nagasaki.ffn_layers')
#         sys.argv.append('1')
#         sys.argv.append('nagasaki.learn_edges_weight')
#         sys.argv.append('True')
#         sys.argv.append('gt.dropout')
#         sys.argv.append('0.1')
#         sys.argv.append('gt.attn_dropout')
#         sys.argv.append('0.1')
#         sys.argv.append('nagasaki.kernel')
#         sys.argv.append('sigmoid')
#         sys.argv.append('wandb.use')
#         sys.argv.append('False')


def _append_params():
    sys.argv.append('--cfg')
    sys.argv.append('tests/configs/graph/color-histogram.yaml')
    sys.argv.append('--max_examples')
    sys.argv.append('100')
    sys.argv.append('--num_rows')
    sys.argv.append('10')
    sys.argv.append('--words_per_row')
    sys.argv.append('10')
    sys.argv.append('--atom_set')
    sys.argv.append('8')
    sys.argv.append('--num_unique_atoms')
    sys.argv.append('1')
    sys.argv.append('--num_unique_colors')
    sys.argv.append('20')
    sys.argv.append('--row_color_mode')
    sys.argv.append('histogram')
    sys.argv.append('nagasaki.steps')
    sys.argv.append('"[1, 2, 3, 4, 5,6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"')
    sys.argv.append('gt.layer_type')
    sys.argv.append('CustomGatedGCN+Nagasaki')
    sys.argv.append('gt.layers')
    sys.argv.append('3')
    sys.argv.append('gt.n_heads')
    sys.argv.append('2')
    sys.argv.append('gt.n_layers_gnn_only')
    sys.argv.append('1')
    sys.argv.append('posenc_LapPE.enable')
    sys.argv.append('False')
    sys.argv.append('posenc_LapPE.layers')
    sys.argv.append('0')
    sys.argv.append('dataset.node_encoder_name')
    sys.argv.append('TypeDictNode+RWSE')
    sys.argv.append('posenc_SignNet.enable')
    sys.argv.append('False')
    sys.argv.append('posenc_SignNet.post_layers')
    sys.argv.append('2')
    sys.argv.append('posenc_RWSE.enable')
    sys.argv.append('True')
    sys.argv.append('posenc_RWSE.kernel.times_func')
    sys.argv.append('"range(1, 21)"')
    sys.argv.append('posenc_RWSE.model')
    sys.argv.append('Linear')
    sys.argv.append('posenc_RWSE.dim_pe')
    sys.argv.append('24')
    sys.argv.append('posenc_RWSE.raw_norm_type')
    sys.argv.append('BatchNorm')
    sys.argv.append('optim.base_lr')
    sys.argv.append('0.0004')
    sys.argv.append('dataset.only_color')
    sys.argv.append('False')
    sys.argv.append('gt.dim_hidden')
    sys.argv.append('32')
    sys.argv.append('gnn.dim_inner')
    sys.argv.append('32')
    sys.argv.append('optim.early_stop_patience')
    sys.argv.append('30')
    sys.argv.append('nagasaki.edge_model_type')
    sys.argv.append('bn-mlp')
    sys.argv.append('nagasaki.edge_reduction')
    sys.argv.append('linear')
    sys.argv.append('nagasaki.ffn_layers')
    sys.argv.append('1')
    sys.argv.append('nagasaki.learn_edges_weight')
    sys.argv.append('True')
    sys.argv.append('gt.dropout')
    sys.argv.append('0.1')
    sys.argv.append('gt.attn_dropout')
    sys.argv.append('0.1')
    sys.argv.append('nagasaki.kernel')
    sys.argv.append('sigmoid')
    sys.argv.append('wandb.use')
    sys.argv.append('False')
    # unittest.main()


if __name__ == '__main__':
    # os.chdir('..')
    _append_params()
    a = main()
    print(a)
    assert 'test_accuracy: 0.38' in a
